<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export3.dtd">
<en-export export-date="20190329T171405Z" application="Evernote" version="Evernote Mac 7.9 (457564)">
<note><title>2장 객체 생성과 파괴</title><content><![CDATA[<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><font style="font-size: 18px;"><b>아이템 1. 생성자 대신 정적 팩토리 메소드를 고려하라.</b></font></div><div><br /></div><div>생성자를 private으로 제공하지 않고 정적 메소드를 이용하여 필요한 객체를 인스턴스화 시킨다.</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>StaticFactory {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">private constructor</span>()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    </div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">newInstance</span>() = StaticFactory()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div><br /></div><div><b>장점으로는 5가지 장점이 있다.</b></div><div><br /></div><div>1. 이름을 가질 수 있다.</div><div>정적 메소드에 이름을 붙여 사용할 수 있기 때문에 생성자보다 알아보기에 용이하다.</div><div><br /></div><div>2. 싱글톤 객체를 이용하여 호출될 때 인스턴스를 따로 생성을 하지 않아도 된다.<br /></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: #cc7832; font-family: &quot;PT Mono&quot;; font-size: 12pt;">class </span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">StaticFactory </span><span style="background-color: rgb(43, 43, 43); color: #cc7832; font-family: &quot;PT Mono&quot;; font-size: 12pt;">private constructor</span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">() {</span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><br /></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">    </span><span style="background-color: rgb(43, 43, 43); color: #cc7832; font-family: &quot;PT Mono&quot;; font-size: 12pt;">companion object </span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">{</span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">        </span><span style="background-color: rgb(43, 43, 43); color: #cc7832; font-family: &quot;PT Mono&quot;; font-size: 12pt;">private object </span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">Holder {</span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">            </span><span style="background-color: rgb(43, 43, 43); color: #cc7832; font-family: &quot;PT Mono&quot;; font-size: 12pt;">val </span><span style="background-color: rgb(43, 43, 43); color: #9876aa; font-family: &quot;PT Mono&quot;; font-size: 12pt;">INSTANCE </span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">= StaticFactory() </span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">        }</span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">        </span><span style="background-color: rgb(43, 43, 43); color: #cc7832; font-family: &quot;PT Mono&quot;; font-size: 12pt;">fun </span><span style="background-color: rgb(43, 43, 43); color: #ffc66d; font-family: &quot;PT Mono&quot;; font-size: 12pt;">getInstance</span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">() = Holder.</span><span style="background-color: rgb(43, 43, 43); color: #9876aa; font-family: &quot;PT Mono&quot;; font-size: 12pt;">INSTANCE</span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: #9876aa; font-family: &quot;PT Mono&quot;; font-size: 12pt;">    </span><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">}</span></div><div style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;"><span style="background-color: rgb(43, 43, 43); color: rgb(169, 183, 198); font-family: &quot;PT Mono&quot;; font-size: 12pt;">}</span></div><div><br /></div><div>3. 리턴 타입의 하위 타입 객체를 반환할 수 있다.</div><div>추상화를 이용해 변경사항이 생겨도 클라이언트에서 수정하지 않고 사용할 수 있게끔 해준다.</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>StaticFactory <span style="color: #cc7832;">private constructor</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">create</span>(): Parent {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">return </span>Child2()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">abstract class </span>Parent {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">abstract fun </span><span style="color: #ffc66d;">foo</span>()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>Child1 : Parent() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">override fun </span><span style="color: #ffc66d;">foo</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="font-style: italic;">println</span>(<span style="color: #6a8759;">"child1"</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>Child2 : Parent() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">override fun </span><span style="color: #ffc66d;">foo</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="font-style: italic;">println</span>(<span style="color: #6a8759;">"child2"</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div><br /></div><div>4. 매개 변수에 따라 다른 클래스의 객체를 반환할 수 있다.</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>StaticFactory <span style="color: #cc7832;">private constructor</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">from</span>(arg: Int): Parent = <span style="color: #cc7832;">when </span>(arg) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #6897bb;">1 </span>-&gt; Child1()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">else </span>-&gt; Child2()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</span><br /></div><div><br /></div><div>5. 정적 팩토리 메소드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>StaticFactory <span style="color: #cc7832;">private constructor</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        fun </span>&lt;<span style="color: #20999d;">T</span>: Parent&gt; <span style="color: #ffc66d;">create</span>(): <span style="color: #20999d;">T </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">return </span>Parent() <span style="color: #cc7832;">as </span><span style="color: #20999d;">T</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #20999d;">        </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div><br /></div><div><br /></div><div><b><font style="font-size: 18px;">하지만 private 생성자를 만들어 사용하기 때문에 상속이 불가하다.</font></b></div><div><b><font style="font-size: 18px;">경우에 따라 알맞게 사용합시다.</font></b></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">아이템 2. 생성자에 매개변수가 많다면 빌더를 고려하라.</span></div><div><span style="font-size: 18px; font-weight: bold;"><br /></span></div><div>생성자에 매개변수가 너무 많을땐 넣을 인자를 헷갈릴수도 있기 때문에 빌더패턴을 권장한다.</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">public class </span>JavaData {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">private int </span><span style="color: #9876aa;">a</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    private char </span><span style="color: #9876aa;">b</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    private double </span><span style="color: #9876aa;">c</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    private byte </span><span style="color: #9876aa;">d</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    private int </span><span style="color: #9876aa;">e</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    public static class </span>Builder {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #808080;">// 필수 매개변수</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #808080;">        </span><span style="color: #cc7832;">private final int </span><span style="color: #9876aa;">a</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        private final char </span><span style="color: #9876aa;">b</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        </span><span style="color: #808080;">// 선택 매개변수</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #808080;">        </span><span style="color: #cc7832;">private double </span><span style="color: #9876aa;">c </span>= <span style="color: #6897bb;">0.0</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        private byte </span><span style="color: #9876aa;">d </span>= <span style="color: #6897bb;">0</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        private int </span><span style="color: #9876aa;">e </span>= <span style="color: #6897bb;">0</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        public </span><span style="color: #ffc66d;">Builder</span>(<span style="color: #cc7832;">int </span>a<span style="color: #cc7832;">, char </span>b) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">this</span>.<span style="color: #9876aa;">a </span>= a<span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">            this</span>.<span style="color: #9876aa;">b </span>= b<span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">public </span>Builder <span style="color: #ffc66d;">c</span>(<span style="color: #cc7832;">double </span>c) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">this</span>.<span style="color: #9876aa;">c </span>= c<span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">            return this;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">public </span>Builder <span style="color: #ffc66d;">d</span>(<span style="color: #cc7832;">byte </span>d) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">this</span>.<span style="color: #9876aa;">d </span>= d<span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">            return this;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">public </span>Builder <span style="color: #ffc66d;">e</span>(<span style="color: #cc7832;">int </span>e) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">this</span>.<span style="color: #9876aa;">e </span>= e<span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">            return this;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        </div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">public </span>JavaData <span style="color: #ffc66d;">build</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">return new </span>JavaData(<span style="color: #cc7832;">this</span>)<span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">private </span><span style="color: #ffc66d;">JavaData</span>(Builder builder) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">this</span>.<span style="color: #9876aa;">a </span>= builder.<span style="color: #9876aa;">a</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        this</span>.<span style="color: #9876aa;">b </span>= builder.<span style="color: #9876aa;">b</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        this</span>.<span style="color: #9876aa;">c </span>= builder.<span style="color: #9876aa;">c</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        this</span>.<span style="color: #9876aa;">d </span>= builder.<span style="color: #9876aa;">d</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">        this</span>.<span style="color: #9876aa;">e </span>= builder.<span style="color: #9876aa;">e</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</span><br /></div><div><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">val </span>data = JavaData.Builder(<span style="color: #6897bb;">1</span><span style="color: #cc7832;">, </span><span style="color: #6a8759;">'1'</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    .c(<span style="color: #6897bb;">1.0</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    .d(<span style="color: #6897bb;">1</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    .e(<span style="color: #6897bb;">1</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    .build()</span><br /></div><div><br /></div><div><br /></div><div><font style="font-size: 18px;">하지만 갓틀린에서는 빌더패턴따위 필요없다.</font></div><div><span style="font-size: 18px;">선택적 매개변수를 지원하기 때문이다.</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>KotlinData(</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">val </span><span style="color: #9876aa;">a</span>: Int<span style="color: #cc7832;">, </span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    val </span><span style="color: #9876aa;">b</span>: Char<span style="color: #cc7832;">,</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    val </span><span style="color: #9876aa;">c</span>: Double = <span style="color: #6897bb;">0.0</span><span style="color: #cc7832;">,</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    val </span><span style="color: #9876aa;">d</span>: Byte = <span style="color: #6897bb;">0</span><span style="color: #cc7832;">,</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">    val </span><span style="color: #9876aa;">e</span>: Int = <span style="color: #6897bb;">0</span>)</div><div><br /></div><div><span style="background-color: #2b2b2b; color: #cc7832; font-family: 'PT Mono'; font-size: 12.0pt;">val </span><span style="background-color: #2b2b2b; color: #a9b7c6; font-family: 'PT Mono'; font-size: 12.0pt;">data = KotlinData(</span><span style="background-color: #2b2b2b; color: #467cda; font-family: 'PT Mono'; font-size: 12.0pt;">a = </span><span style="background-color: #2b2b2b; color: #6897bb; font-family: 'PT Mono'; font-size: 12.0pt;">1</span><span style="background-color: #2b2b2b; color: #cc7832; font-family: 'PT Mono'; font-size: 12.0pt;">, </span><span style="background-color: #2b2b2b; color: #467cda; font-family: 'PT Mono'; font-size: 12.0pt;">b = </span><span style="background-color: #2b2b2b; color: #6a8759; font-family: 'PT Mono'; font-size: 12.0pt;">'1'</span><span style="background-color: #2b2b2b; color: #a9b7c6; font-family: 'PT Mono'; font-size: 12.0pt;">)</span></div><div><br /></div><div><br /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">아이템 3. 생성자나 열거 타입으로 싱글톤임을 보증하라.</span></div><div><br /></div><div>Case1 public static</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>SingleTon <span style="color: #cc7832;">private constructor</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">val </span><span style="color: #9876aa;">INSTANCE </span>= SingleTon()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div>싱글톤 객체임을 변경할 수 없으며 private 생성자를 접근할 수 있는 리플렉션 공격에 취약하다.</div><div><br /></div><div>Case2 static factory</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>SingleTon <span style="color: #cc7832;">private constructor</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        </div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">private val </span><span style="color: #9876aa;">INSTANCE </span>= SingleTon()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        </div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">getInstance</span>() = <span style="color: #9876aa;">INSTANCE</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #9876aa;">    </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div>메소드로 제공하기 때문에 싱글톤이 아닌 객체로 바꿀 수 있으며 제네릭으로 만들기에 용이하다.</div><div>하지만 마찬가지로 리플렉션 공격에는 취약하다.</div><div><br /></div><div>Case3 Enum</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">enum class </span>SingleTon {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #9876aa;">INSTANCE</span><span style="color: #cc7832;">;</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div>Enum은 단 한가지만 만들어지기 때문에 리플렉션, 직렬화, 멀티쓰레딩에 안전하다.</div><div>하지만 enum 클래스 외에는 상속이 불가하기 때문에 상속에 자유롭지않다.</div><div><br /></div><div>Case4 LazyHolder</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>SingleTon <span style="color: #cc7832;">private constructor</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">private class </span>Holder {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #cc7832;">val </span><span style="color: #9876aa;">INSTANCE </span>= SingleTon()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"> </div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">getInstance</span>() = Holder.<span style="color: #9876aa;">INSTANCE</span></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #9876aa;">    </span>}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div>getInstance를 호출하는 순간 Holder class가 로드되며 초기화되기 때문에</div><div>쓰레드에 안전하며 성능개선에도 도움이 된다.</div><div><br /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">아이템 4. 인스턴스화를 막으려거든 private 생성자를 사용하라.</span></div><div><br /></div><div>Final class를 만들어 상속을 불가하게 하고 private 생성자를 만들어 인스턴스화를 불가하게 만들면 절대 클래스를 인스턴스화 시킬 수 없다. </div><div>보통 정적메소드, 정적필드만을 담아 사용할 때 구현한다.</div><div><br /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">아이템 5. 자원을 직접 명시하지 말고 의존 객체 주입을 사용하라.</span></div><div><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>WorldGreeting {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">companion object </span>{</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">private val </span><span style="color: #9876aa;">human </span>= KoreanChild()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">greeting</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">            <span style="color: #9876aa;">human</span>.greeting()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        }   </div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">abstract class </span>Parent {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">abstract fun </span><span style="color: #ffc66d;">greeting</span>()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>KoreanChild : Parent() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">override fun </span><span style="color: #ffc66d;">greeting</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="font-style: italic;">println</span>(<span style="color: #6a8759;">"안녕?"</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>GermanChild : Parent() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">override fun </span><span style="color: #ffc66d;">greeting</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="font-style: italic;">println</span>(<span style="color: #6a8759;">"Guten tag!"</span>)</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div>static 방식을 사용 했을시에는 다형성을 구현하기에 적합하지 않다.</div><div><br /></div><div><br /></div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;"><span style="color: #cc7832;">class </span>WorldGreeting(<span style="color: #cc7832;">private val </span><span style="color: #9876aa;">human</span>: Parent) {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    <span style="color: #cc7832;">fun </span><span style="color: #ffc66d;">greeting</span>() {</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">        <span style="color: #9876aa;">human</span>.greeting()</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">    }</div><div style="background-color:rgb(43, 43, 43);color:rgb(169, 183, 198);font-family:&quot;PT Mono&quot;;font-size:12pt;">}</div><div>의존성 주입방식을 사용하면 유연성과 테스트 용이성을 높여준다.</div><div><br /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">아이템 6. 불필요한 객체 생성을 피하라.</span></div><div><br /></div><ol><li><div>생성비용이 아주 비싼 객체는 캐싱하여 재사용을 권고한다.</div></li><li><div>박싱된 기본 타입보다는 기본 타입을 사용하고, 의도치 않은 오토박싱이 숨어들지 않도록 주의하라.</div></li></ol><div><br /></div><div><span style="font-size: 18px; font-weight: bold;"><br /></span></div><div><span style="font-size: 18px; font-weight: bold;">아이템 7. 다 쓴 객체 참조를 해제하라.</span><br /></div><div><br /></div><ol><li><div>다 쓴 객체에는 꼭 null를 넣어 참조를 해제하라. 그렇지 않으면 gc의 수거대상에서 벗어나게된다.</div></li><li><div>다 쓴 callback은 해제하지 않으면 콜백은 계속 쌓여갈 것이다. gc를 위해 weak reference등을 사용해 저장하자.</div></li></ol><div><br /></div><div><br /></div><div><span style="font-size: 18px; font-weight: bold;">아이템 8. finalizer와 cleaner 사용을 피하라.</span></div><div><br /></div><ol><li><div>즉시 수행된다는 보장이 없다.</div></li><li><div>수행 여부 조차 보장하지 않는다.</div></li><li><div>심각한 성능문제를 동반하며 보안문제를 일으킬 수도 있다.</div></li></ol><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div></en-note>]]></content><created>20190328T133654Z</created><updated>20190329T171322Z</updated><note-attributes><author>J J</author><source>desktop.mac</source><reminder-order>0</reminder-order></note-attributes></note>
</en-export>
